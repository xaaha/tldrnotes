---
import Mainlayout from "@layouts/Mainlayout.astro";
import type { MarkdownInstance } from "astro";
import { getLastGitDate } from "@scripts/utils.ts";
import PostCard from "@components/PostCard.astro";

const allPosts = import.meta.glob<MarkdownInstance<Frontmatter>>(
  "./*.{md,mdx}",
  {
    eager: true,
  },
);

// Filter out draft posts
const blogPosts = Object.values(allPosts).filter(
  (post) => !post.frontmatter.draft,
);

// Extract and format the data
const posts = await Promise.all(
  blogPosts.map(async (post: MarkdownInstance<Frontmatter>) => {
    // get last git date
    const lastModifiedDate = await getLastGitDate(post.file);
    const date = post.frontmatter.date
      ? new Date(post.frontmatter.date)
      : lastModifiedDate;

    return {
      frontmatter: post.frontmatter,
      url: post.url,
      date: date, // for sorting
    };
  }),
);

// Sort posts newest first
const sortedPosts = posts.sort((a, b) => b.date?.getTime() - a.date?.getTime());
---

<Mainlayout>
  <section class="container" aria-label="New Blog Posts">
    <h1 class="h1">Recent Posts</h1>
    <div class="post-container">
      {
        sortedPosts.map((post) => (
          <PostCard
            frontmatter={post.frontmatter}
            url={post.url}
            tagType="h2"
          />
        ))
      }
    </div>
  </section>
</Mainlayout>
